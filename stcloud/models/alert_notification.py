# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'app_type': 'str',
        'back_to_normal': 'bool',
        'create_time': 'str',
        'sent': 'bool',
        'text': 'str',
        'when': 'str'
    }

    attribute_map = {
        'app_name': 'appName',
        'app_type': 'appType',
        'back_to_normal': 'backToNormal',
        'create_time': 'createTime',
        'sent': 'sent',
        'text': 'text',
        'when': 'when'
    }

    def __init__(self, app_name=None, app_type=None, back_to_normal=None, create_time=None, sent=None, text=None, when=None):  # noqa: E501
        """AlertNotification - a model defined in Swagger"""  # noqa: E501
        self._app_name = None
        self._app_type = None
        self._back_to_normal = None
        self._create_time = None
        self._sent = None
        self._text = None
        self._when = None
        self.discriminator = None
        if app_name is not None:
            self.app_name = app_name
        if app_type is not None:
            self.app_type = app_type
        if back_to_normal is not None:
            self.back_to_normal = back_to_normal
        if create_time is not None:
            self.create_time = create_time
        if sent is not None:
            self.sent = sent
        if text is not None:
            self.text = text
        if when is not None:
            self.when = when

    @property
    def app_name(self):
        """Gets the app_name of this AlertNotification.  # noqa: E501


        :return: The app_name of this AlertNotification.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AlertNotification.


        :param app_name: The app_name of this AlertNotification.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_type(self):
        """Gets the app_type of this AlertNotification.  # noqa: E501


        :return: The app_type of this AlertNotification.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this AlertNotification.


        :param app_type: The app_type of this AlertNotification.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def back_to_normal(self):
        """Gets the back_to_normal of this AlertNotification.  # noqa: E501


        :return: The back_to_normal of this AlertNotification.  # noqa: E501
        :rtype: bool
        """
        return self._back_to_normal

    @back_to_normal.setter
    def back_to_normal(self, back_to_normal):
        """Sets the back_to_normal of this AlertNotification.


        :param back_to_normal: The back_to_normal of this AlertNotification.  # noqa: E501
        :type: bool
        """

        self._back_to_normal = back_to_normal

    @property
    def create_time(self):
        """Gets the create_time of this AlertNotification.  # noqa: E501


        :return: The create_time of this AlertNotification.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AlertNotification.


        :param create_time: The create_time of this AlertNotification.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def sent(self):
        """Gets the sent of this AlertNotification.  # noqa: E501


        :return: The sent of this AlertNotification.  # noqa: E501
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this AlertNotification.


        :param sent: The sent of this AlertNotification.  # noqa: E501
        :type: bool
        """

        self._sent = sent

    @property
    def text(self):
        """Gets the text of this AlertNotification.  # noqa: E501


        :return: The text of this AlertNotification.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AlertNotification.


        :param text: The text of this AlertNotification.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def when(self):
        """Gets the when of this AlertNotification.  # noqa: E501


        :return: The when of this AlertNotification.  # noqa: E501
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this AlertNotification.


        :param when: The when of this AlertNotification.  # noqa: E501
        :type: str
        """

        self._when = when

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
