# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MinPeriodFeePeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'browser_monitors': 'int',
        'discount': 'float',
        'from_date': 'datetime',
        'http_monitors': 'int',
        'id': 'int',
        'ingestion_period_fee_amount': 'float',
        'min_period_fee_amount': 'float',
        'overage_percentage': 'float',
        'plan_data_limit': 'int',
        'storage_period_fee_amount': 'float',
        'to_date': 'datetime',
        'used_plan': 'str',
        'used_plan_period_fee': 'float'
    }

    attribute_map = {
        'browser_monitors': 'browserMonitors',
        'discount': 'discount',
        'from_date': 'fromDate',
        'http_monitors': 'httpMonitors',
        'id': 'id',
        'ingestion_period_fee_amount': 'ingestionPeriodFeeAmount',
        'min_period_fee_amount': 'minPeriodFeeAmount',
        'overage_percentage': 'overagePercentage',
        'plan_data_limit': 'planDataLimit',
        'storage_period_fee_amount': 'storagePeriodFeeAmount',
        'to_date': 'toDate',
        'used_plan': 'usedPlan',
        'used_plan_period_fee': 'usedPlanPeriodFee'
    }

    def __init__(self, browser_monitors=None, discount=None, from_date=None, http_monitors=None, id=None, ingestion_period_fee_amount=None, min_period_fee_amount=None, overage_percentage=None, plan_data_limit=None, storage_period_fee_amount=None, to_date=None, used_plan=None, used_plan_period_fee=None):  # noqa: E501
        """MinPeriodFeePeriod - a model defined in Swagger"""  # noqa: E501
        self._browser_monitors = None
        self._discount = None
        self._from_date = None
        self._http_monitors = None
        self._id = None
        self._ingestion_period_fee_amount = None
        self._min_period_fee_amount = None
        self._overage_percentage = None
        self._plan_data_limit = None
        self._storage_period_fee_amount = None
        self._to_date = None
        self._used_plan = None
        self._used_plan_period_fee = None
        self.discriminator = None
        if browser_monitors is not None:
            self.browser_monitors = browser_monitors
        if discount is not None:
            self.discount = discount
        if from_date is not None:
            self.from_date = from_date
        if http_monitors is not None:
            self.http_monitors = http_monitors
        if id is not None:
            self.id = id
        if ingestion_period_fee_amount is not None:
            self.ingestion_period_fee_amount = ingestion_period_fee_amount
        if min_period_fee_amount is not None:
            self.min_period_fee_amount = min_period_fee_amount
        if overage_percentage is not None:
            self.overage_percentage = overage_percentage
        if plan_data_limit is not None:
            self.plan_data_limit = plan_data_limit
        if storage_period_fee_amount is not None:
            self.storage_period_fee_amount = storage_period_fee_amount
        if to_date is not None:
            self.to_date = to_date
        if used_plan is not None:
            self.used_plan = used_plan
        if used_plan_period_fee is not None:
            self.used_plan_period_fee = used_plan_period_fee

    @property
    def browser_monitors(self):
        """Gets the browser_monitors of this MinPeriodFeePeriod.  # noqa: E501


        :return: The browser_monitors of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: int
        """
        return self._browser_monitors

    @browser_monitors.setter
    def browser_monitors(self, browser_monitors):
        """Sets the browser_monitors of this MinPeriodFeePeriod.


        :param browser_monitors: The browser_monitors of this MinPeriodFeePeriod.  # noqa: E501
        :type: int
        """

        self._browser_monitors = browser_monitors

    @property
    def discount(self):
        """Gets the discount of this MinPeriodFeePeriod.  # noqa: E501


        :return: The discount of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this MinPeriodFeePeriod.


        :param discount: The discount of this MinPeriodFeePeriod.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def from_date(self):
        """Gets the from_date of this MinPeriodFeePeriod.  # noqa: E501


        :return: The from_date of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this MinPeriodFeePeriod.


        :param from_date: The from_date of this MinPeriodFeePeriod.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def http_monitors(self):
        """Gets the http_monitors of this MinPeriodFeePeriod.  # noqa: E501


        :return: The http_monitors of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: int
        """
        return self._http_monitors

    @http_monitors.setter
    def http_monitors(self, http_monitors):
        """Sets the http_monitors of this MinPeriodFeePeriod.


        :param http_monitors: The http_monitors of this MinPeriodFeePeriod.  # noqa: E501
        :type: int
        """

        self._http_monitors = http_monitors

    @property
    def id(self):
        """Gets the id of this MinPeriodFeePeriod.  # noqa: E501


        :return: The id of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MinPeriodFeePeriod.


        :param id: The id of this MinPeriodFeePeriod.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ingestion_period_fee_amount(self):
        """Gets the ingestion_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501


        :return: The ingestion_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: float
        """
        return self._ingestion_period_fee_amount

    @ingestion_period_fee_amount.setter
    def ingestion_period_fee_amount(self, ingestion_period_fee_amount):
        """Sets the ingestion_period_fee_amount of this MinPeriodFeePeriod.


        :param ingestion_period_fee_amount: The ingestion_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501
        :type: float
        """

        self._ingestion_period_fee_amount = ingestion_period_fee_amount

    @property
    def min_period_fee_amount(self):
        """Gets the min_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501


        :return: The min_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: float
        """
        return self._min_period_fee_amount

    @min_period_fee_amount.setter
    def min_period_fee_amount(self, min_period_fee_amount):
        """Sets the min_period_fee_amount of this MinPeriodFeePeriod.


        :param min_period_fee_amount: The min_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501
        :type: float
        """

        self._min_period_fee_amount = min_period_fee_amount

    @property
    def overage_percentage(self):
        """Gets the overage_percentage of this MinPeriodFeePeriod.  # noqa: E501


        :return: The overage_percentage of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: float
        """
        return self._overage_percentage

    @overage_percentage.setter
    def overage_percentage(self, overage_percentage):
        """Sets the overage_percentage of this MinPeriodFeePeriod.


        :param overage_percentage: The overage_percentage of this MinPeriodFeePeriod.  # noqa: E501
        :type: float
        """

        self._overage_percentage = overage_percentage

    @property
    def plan_data_limit(self):
        """Gets the plan_data_limit of this MinPeriodFeePeriod.  # noqa: E501


        :return: The plan_data_limit of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: int
        """
        return self._plan_data_limit

    @plan_data_limit.setter
    def plan_data_limit(self, plan_data_limit):
        """Sets the plan_data_limit of this MinPeriodFeePeriod.


        :param plan_data_limit: The plan_data_limit of this MinPeriodFeePeriod.  # noqa: E501
        :type: int
        """

        self._plan_data_limit = plan_data_limit

    @property
    def storage_period_fee_amount(self):
        """Gets the storage_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501


        :return: The storage_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: float
        """
        return self._storage_period_fee_amount

    @storage_period_fee_amount.setter
    def storage_period_fee_amount(self, storage_period_fee_amount):
        """Sets the storage_period_fee_amount of this MinPeriodFeePeriod.


        :param storage_period_fee_amount: The storage_period_fee_amount of this MinPeriodFeePeriod.  # noqa: E501
        :type: float
        """

        self._storage_period_fee_amount = storage_period_fee_amount

    @property
    def to_date(self):
        """Gets the to_date of this MinPeriodFeePeriod.  # noqa: E501


        :return: The to_date of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this MinPeriodFeePeriod.


        :param to_date: The to_date of this MinPeriodFeePeriod.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    @property
    def used_plan(self):
        """Gets the used_plan of this MinPeriodFeePeriod.  # noqa: E501


        :return: The used_plan of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: str
        """
        return self._used_plan

    @used_plan.setter
    def used_plan(self, used_plan):
        """Sets the used_plan of this MinPeriodFeePeriod.


        :param used_plan: The used_plan of this MinPeriodFeePeriod.  # noqa: E501
        :type: str
        """

        self._used_plan = used_plan

    @property
    def used_plan_period_fee(self):
        """Gets the used_plan_period_fee of this MinPeriodFeePeriod.  # noqa: E501


        :return: The used_plan_period_fee of this MinPeriodFeePeriod.  # noqa: E501
        :rtype: float
        """
        return self._used_plan_period_fee

    @used_plan_period_fee.setter
    def used_plan_period_fee(self, used_plan_period_fee):
        """Sets the used_plan_period_fee of this MinPeriodFeePeriod.


        :param used_plan_period_fee: The used_plan_period_fee of this MinPeriodFeePeriod.  # noqa: E501
        :type: float
        """

        self._used_plan_period_fee = used_plan_period_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MinPeriodFeePeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinPeriodFeePeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
