# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class App(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ajax_threshold': 'int',
        'app_type': 'str',
        'app_type_id': 'int',
        'creator_email': 'str',
        'credit_card_expiry': 'str',
        'credit_card_number': 'str',
        'description': 'str',
        'display_status': 'str',
        'first_data_saved_date': 'int',
        'id': 'int',
        'integration': 'ServiceIntegration',
        'last_data_received_date': 'int',
        'last_data_saved_date': 'int',
        'logged_in_user_app_role': 'str',
        'monthly_invoice_account': 'bool',
        'name': 'str',
        'owner_email': 'str',
        'owning_organization': 'BasicOrganizationDto',
        'page_load_threshold': 'int',
        'payment_method_id': 'int',
        'plan': 'Plan',
        'prepaid_account': 'bool',
        'read_token': 'str',
        'read_write_token': 'str',
        'registration_date': 'int',
        'status': 'str',
        'token': 'str',
        'tokens': 'list[str]',
        'trial_end_date': 'int',
        'url_group_limit': 'int',
        'user_roles': 'list[UserRole]',
        'write_token': 'str'
    }

    attribute_map = {
        'ajax_threshold': 'ajaxThreshold',
        'app_type': 'appType',
        'app_type_id': 'appTypeId',
        'creator_email': 'creatorEmail',
        'credit_card_expiry': 'creditCardExpiry',
        'credit_card_number': 'creditCardNumber',
        'description': 'description',
        'display_status': 'displayStatus',
        'first_data_saved_date': 'firstDataSavedDate',
        'id': 'id',
        'integration': 'integration',
        'last_data_received_date': 'lastDataReceivedDate',
        'last_data_saved_date': 'lastDataSavedDate',
        'logged_in_user_app_role': 'loggedInUserAppRole',
        'monthly_invoice_account': 'monthlyInvoiceAccount',
        'name': 'name',
        'owner_email': 'ownerEmail',
        'owning_organization': 'owningOrganization',
        'page_load_threshold': 'pageLoadThreshold',
        'payment_method_id': 'paymentMethodId',
        'plan': 'plan',
        'prepaid_account': 'prepaidAccount',
        'read_token': 'readToken',
        'read_write_token': 'readWriteToken',
        'registration_date': 'registrationDate',
        'status': 'status',
        'token': 'token',
        'tokens': 'tokens',
        'trial_end_date': 'trialEndDate',
        'url_group_limit': 'urlGroupLimit',
        'user_roles': 'userRoles',
        'write_token': 'writeToken'
    }

    def __init__(self, ajax_threshold=None, app_type=None, app_type_id=None, creator_email=None, credit_card_expiry=None, credit_card_number=None, description=None, display_status=None, first_data_saved_date=None, id=None, integration=None, last_data_received_date=None, last_data_saved_date=None, logged_in_user_app_role=None, monthly_invoice_account=None, name=None, owner_email=None, owning_organization=None, page_load_threshold=None, payment_method_id=None, plan=None, prepaid_account=None, read_token=None, read_write_token=None, registration_date=None, status=None, token=None, tokens=None, trial_end_date=None, url_group_limit=None, user_roles=None, write_token=None):  # noqa: E501
        """App - a model defined in Swagger"""  # noqa: E501
        self._ajax_threshold = None
        self._app_type = None
        self._app_type_id = None
        self._creator_email = None
        self._credit_card_expiry = None
        self._credit_card_number = None
        self._description = None
        self._display_status = None
        self._first_data_saved_date = None
        self._id = None
        self._integration = None
        self._last_data_received_date = None
        self._last_data_saved_date = None
        self._logged_in_user_app_role = None
        self._monthly_invoice_account = None
        self._name = None
        self._owner_email = None
        self._owning_organization = None
        self._page_load_threshold = None
        self._payment_method_id = None
        self._plan = None
        self._prepaid_account = None
        self._read_token = None
        self._read_write_token = None
        self._registration_date = None
        self._status = None
        self._token = None
        self._tokens = None
        self._trial_end_date = None
        self._url_group_limit = None
        self._user_roles = None
        self._write_token = None
        self.discriminator = None
        if ajax_threshold is not None:
            self.ajax_threshold = ajax_threshold
        if app_type is not None:
            self.app_type = app_type
        if app_type_id is not None:
            self.app_type_id = app_type_id
        if creator_email is not None:
            self.creator_email = creator_email
        if credit_card_expiry is not None:
            self.credit_card_expiry = credit_card_expiry
        if credit_card_number is not None:
            self.credit_card_number = credit_card_number
        if description is not None:
            self.description = description
        if display_status is not None:
            self.display_status = display_status
        if first_data_saved_date is not None:
            self.first_data_saved_date = first_data_saved_date
        if id is not None:
            self.id = id
        if integration is not None:
            self.integration = integration
        if last_data_received_date is not None:
            self.last_data_received_date = last_data_received_date
        if last_data_saved_date is not None:
            self.last_data_saved_date = last_data_saved_date
        if logged_in_user_app_role is not None:
            self.logged_in_user_app_role = logged_in_user_app_role
        if monthly_invoice_account is not None:
            self.monthly_invoice_account = monthly_invoice_account
        if name is not None:
            self.name = name
        if owner_email is not None:
            self.owner_email = owner_email
        if owning_organization is not None:
            self.owning_organization = owning_organization
        if page_load_threshold is not None:
            self.page_load_threshold = page_load_threshold
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if plan is not None:
            self.plan = plan
        if prepaid_account is not None:
            self.prepaid_account = prepaid_account
        if read_token is not None:
            self.read_token = read_token
        if read_write_token is not None:
            self.read_write_token = read_write_token
        if registration_date is not None:
            self.registration_date = registration_date
        if status is not None:
            self.status = status
        if token is not None:
            self.token = token
        if tokens is not None:
            self.tokens = tokens
        if trial_end_date is not None:
            self.trial_end_date = trial_end_date
        if url_group_limit is not None:
            self.url_group_limit = url_group_limit
        if user_roles is not None:
            self.user_roles = user_roles
        if write_token is not None:
            self.write_token = write_token

    @property
    def ajax_threshold(self):
        """Gets the ajax_threshold of this App.  # noqa: E501


        :return: The ajax_threshold of this App.  # noqa: E501
        :rtype: int
        """
        return self._ajax_threshold

    @ajax_threshold.setter
    def ajax_threshold(self, ajax_threshold):
        """Sets the ajax_threshold of this App.


        :param ajax_threshold: The ajax_threshold of this App.  # noqa: E501
        :type: int
        """

        self._ajax_threshold = ajax_threshold

    @property
    def app_type(self):
        """Gets the app_type of this App.  # noqa: E501


        :return: The app_type of this App.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this App.


        :param app_type: The app_type of this App.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def app_type_id(self):
        """Gets the app_type_id of this App.  # noqa: E501


        :return: The app_type_id of this App.  # noqa: E501
        :rtype: int
        """
        return self._app_type_id

    @app_type_id.setter
    def app_type_id(self, app_type_id):
        """Sets the app_type_id of this App.


        :param app_type_id: The app_type_id of this App.  # noqa: E501
        :type: int
        """

        self._app_type_id = app_type_id

    @property
    def creator_email(self):
        """Gets the creator_email of this App.  # noqa: E501


        :return: The creator_email of this App.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this App.


        :param creator_email: The creator_email of this App.  # noqa: E501
        :type: str
        """

        self._creator_email = creator_email

    @property
    def credit_card_expiry(self):
        """Gets the credit_card_expiry of this App.  # noqa: E501


        :return: The credit_card_expiry of this App.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_expiry

    @credit_card_expiry.setter
    def credit_card_expiry(self, credit_card_expiry):
        """Sets the credit_card_expiry of this App.


        :param credit_card_expiry: The credit_card_expiry of this App.  # noqa: E501
        :type: str
        """

        self._credit_card_expiry = credit_card_expiry

    @property
    def credit_card_number(self):
        """Gets the credit_card_number of this App.  # noqa: E501


        :return: The credit_card_number of this App.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_number

    @credit_card_number.setter
    def credit_card_number(self, credit_card_number):
        """Sets the credit_card_number of this App.


        :param credit_card_number: The credit_card_number of this App.  # noqa: E501
        :type: str
        """

        self._credit_card_number = credit_card_number

    @property
    def description(self):
        """Gets the description of this App.  # noqa: E501


        :return: The description of this App.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this App.


        :param description: The description of this App.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_status(self):
        """Gets the display_status of this App.  # noqa: E501


        :return: The display_status of this App.  # noqa: E501
        :rtype: str
        """
        return self._display_status

    @display_status.setter
    def display_status(self, display_status):
        """Sets the display_status of this App.


        :param display_status: The display_status of this App.  # noqa: E501
        :type: str
        """

        self._display_status = display_status

    @property
    def first_data_saved_date(self):
        """Gets the first_data_saved_date of this App.  # noqa: E501


        :return: The first_data_saved_date of this App.  # noqa: E501
        :rtype: int
        """
        return self._first_data_saved_date

    @first_data_saved_date.setter
    def first_data_saved_date(self, first_data_saved_date):
        """Sets the first_data_saved_date of this App.


        :param first_data_saved_date: The first_data_saved_date of this App.  # noqa: E501
        :type: int
        """

        self._first_data_saved_date = first_data_saved_date

    @property
    def id(self):
        """Gets the id of this App.  # noqa: E501


        :return: The id of this App.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this App.


        :param id: The id of this App.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def integration(self):
        """Gets the integration of this App.  # noqa: E501


        :return: The integration of this App.  # noqa: E501
        :rtype: ServiceIntegration
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this App.


        :param integration: The integration of this App.  # noqa: E501
        :type: ServiceIntegration
        """

        self._integration = integration

    @property
    def last_data_received_date(self):
        """Gets the last_data_received_date of this App.  # noqa: E501


        :return: The last_data_received_date of this App.  # noqa: E501
        :rtype: int
        """
        return self._last_data_received_date

    @last_data_received_date.setter
    def last_data_received_date(self, last_data_received_date):
        """Sets the last_data_received_date of this App.


        :param last_data_received_date: The last_data_received_date of this App.  # noqa: E501
        :type: int
        """

        self._last_data_received_date = last_data_received_date

    @property
    def last_data_saved_date(self):
        """Gets the last_data_saved_date of this App.  # noqa: E501


        :return: The last_data_saved_date of this App.  # noqa: E501
        :rtype: int
        """
        return self._last_data_saved_date

    @last_data_saved_date.setter
    def last_data_saved_date(self, last_data_saved_date):
        """Sets the last_data_saved_date of this App.


        :param last_data_saved_date: The last_data_saved_date of this App.  # noqa: E501
        :type: int
        """

        self._last_data_saved_date = last_data_saved_date

    @property
    def logged_in_user_app_role(self):
        """Gets the logged_in_user_app_role of this App.  # noqa: E501


        :return: The logged_in_user_app_role of this App.  # noqa: E501
        :rtype: str
        """
        return self._logged_in_user_app_role

    @logged_in_user_app_role.setter
    def logged_in_user_app_role(self, logged_in_user_app_role):
        """Sets the logged_in_user_app_role of this App.


        :param logged_in_user_app_role: The logged_in_user_app_role of this App.  # noqa: E501
        :type: str
        """

        self._logged_in_user_app_role = logged_in_user_app_role

    @property
    def monthly_invoice_account(self):
        """Gets the monthly_invoice_account of this App.  # noqa: E501


        :return: The monthly_invoice_account of this App.  # noqa: E501
        :rtype: bool
        """
        return self._monthly_invoice_account

    @monthly_invoice_account.setter
    def monthly_invoice_account(self, monthly_invoice_account):
        """Sets the monthly_invoice_account of this App.


        :param monthly_invoice_account: The monthly_invoice_account of this App.  # noqa: E501
        :type: bool
        """

        self._monthly_invoice_account = monthly_invoice_account

    @property
    def name(self):
        """Gets the name of this App.  # noqa: E501


        :return: The name of this App.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.


        :param name: The name of this App.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner_email(self):
        """Gets the owner_email of this App.  # noqa: E501


        :return: The owner_email of this App.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this App.


        :param owner_email: The owner_email of this App.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def owning_organization(self):
        """Gets the owning_organization of this App.  # noqa: E501


        :return: The owning_organization of this App.  # noqa: E501
        :rtype: BasicOrganizationDto
        """
        return self._owning_organization

    @owning_organization.setter
    def owning_organization(self, owning_organization):
        """Sets the owning_organization of this App.


        :param owning_organization: The owning_organization of this App.  # noqa: E501
        :type: BasicOrganizationDto
        """

        self._owning_organization = owning_organization

    @property
    def page_load_threshold(self):
        """Gets the page_load_threshold of this App.  # noqa: E501


        :return: The page_load_threshold of this App.  # noqa: E501
        :rtype: int
        """
        return self._page_load_threshold

    @page_load_threshold.setter
    def page_load_threshold(self, page_load_threshold):
        """Sets the page_load_threshold of this App.


        :param page_load_threshold: The page_load_threshold of this App.  # noqa: E501
        :type: int
        """

        self._page_load_threshold = page_load_threshold

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this App.  # noqa: E501


        :return: The payment_method_id of this App.  # noqa: E501
        :rtype: int
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this App.


        :param payment_method_id: The payment_method_id of this App.  # noqa: E501
        :type: int
        """

        self._payment_method_id = payment_method_id

    @property
    def plan(self):
        """Gets the plan of this App.  # noqa: E501


        :return: The plan of this App.  # noqa: E501
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this App.


        :param plan: The plan of this App.  # noqa: E501
        :type: Plan
        """

        self._plan = plan

    @property
    def prepaid_account(self):
        """Gets the prepaid_account of this App.  # noqa: E501


        :return: The prepaid_account of this App.  # noqa: E501
        :rtype: bool
        """
        return self._prepaid_account

    @prepaid_account.setter
    def prepaid_account(self, prepaid_account):
        """Sets the prepaid_account of this App.


        :param prepaid_account: The prepaid_account of this App.  # noqa: E501
        :type: bool
        """

        self._prepaid_account = prepaid_account

    @property
    def read_token(self):
        """Gets the read_token of this App.  # noqa: E501


        :return: The read_token of this App.  # noqa: E501
        :rtype: str
        """
        return self._read_token

    @read_token.setter
    def read_token(self, read_token):
        """Sets the read_token of this App.


        :param read_token: The read_token of this App.  # noqa: E501
        :type: str
        """

        self._read_token = read_token

    @property
    def read_write_token(self):
        """Gets the read_write_token of this App.  # noqa: E501


        :return: The read_write_token of this App.  # noqa: E501
        :rtype: str
        """
        return self._read_write_token

    @read_write_token.setter
    def read_write_token(self, read_write_token):
        """Sets the read_write_token of this App.


        :param read_write_token: The read_write_token of this App.  # noqa: E501
        :type: str
        """

        self._read_write_token = read_write_token

    @property
    def registration_date(self):
        """Gets the registration_date of this App.  # noqa: E501


        :return: The registration_date of this App.  # noqa: E501
        :rtype: int
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this App.


        :param registration_date: The registration_date of this App.  # noqa: E501
        :type: int
        """

        self._registration_date = registration_date

    @property
    def status(self):
        """Gets the status of this App.  # noqa: E501


        :return: The status of this App.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this App.


        :param status: The status of this App.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def token(self):
        """Gets the token of this App.  # noqa: E501


        :return: The token of this App.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this App.


        :param token: The token of this App.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def tokens(self):
        """Gets the tokens of this App.  # noqa: E501


        :return: The tokens of this App.  # noqa: E501
        :rtype: list[str]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this App.


        :param tokens: The tokens of this App.  # noqa: E501
        :type: list[str]
        """

        self._tokens = tokens

    @property
    def trial_end_date(self):
        """Gets the trial_end_date of this App.  # noqa: E501


        :return: The trial_end_date of this App.  # noqa: E501
        :rtype: int
        """
        return self._trial_end_date

    @trial_end_date.setter
    def trial_end_date(self, trial_end_date):
        """Sets the trial_end_date of this App.


        :param trial_end_date: The trial_end_date of this App.  # noqa: E501
        :type: int
        """

        self._trial_end_date = trial_end_date

    @property
    def url_group_limit(self):
        """Gets the url_group_limit of this App.  # noqa: E501


        :return: The url_group_limit of this App.  # noqa: E501
        :rtype: int
        """
        return self._url_group_limit

    @url_group_limit.setter
    def url_group_limit(self, url_group_limit):
        """Sets the url_group_limit of this App.


        :param url_group_limit: The url_group_limit of this App.  # noqa: E501
        :type: int
        """

        self._url_group_limit = url_group_limit

    @property
    def user_roles(self):
        """Gets the user_roles of this App.  # noqa: E501


        :return: The user_roles of this App.  # noqa: E501
        :rtype: list[UserRole]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this App.


        :param user_roles: The user_roles of this App.  # noqa: E501
        :type: list[UserRole]
        """

        self._user_roles = user_roles

    @property
    def write_token(self):
        """Gets the write_token of this App.  # noqa: E501


        :return: The write_token of this App.  # noqa: E501
        :rtype: str
        """
        return self._write_token

    @write_token.setter
    def write_token(self, write_token):
        """Sets the write_token of this App.


        :param write_token: The write_token of this App.  # noqa: E501
        :type: str
        """

        self._write_token = write_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(App, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, App):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
