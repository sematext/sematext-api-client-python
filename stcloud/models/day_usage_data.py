# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DayUsageData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count_daily_data_points': 'int',
        'day': 'str',
        'discount': 'float',
        'dpm_per_container_host_quota': 'int',
        'dpm_per_host_quota': 'int',
        'fixed_monthly_price': 'float',
        'fixed_monthly_price_per_hour': 'float',
        'free_containers_per_host': 'int',
        'id': 'int',
        'kilo_dpm_overage_price_per_hour': 'float',
        'plan_type': 'str',
        'price_per_container_host_hour': 'float',
        'price_per_container_hour': 'float',
        'price_per_server_hour': 'float',
        'sum_number_of_container_hosts': 'int',
        'sum_number_of_containers': 'int',
        'sum_number_of_servers': 'int',
        'usage_amount': 'float',
        'used_plan': 'str',
        'user_discount': 'float'
    }

    attribute_map = {
        'count_daily_data_points': 'countDailyDataPoints',
        'day': 'day',
        'discount': 'discount',
        'dpm_per_container_host_quota': 'dpmPerContainerHostQuota',
        'dpm_per_host_quota': 'dpmPerHostQuota',
        'fixed_monthly_price': 'fixedMonthlyPrice',
        'fixed_monthly_price_per_hour': 'fixedMonthlyPricePerHour',
        'free_containers_per_host': 'freeContainersPerHost',
        'id': 'id',
        'kilo_dpm_overage_price_per_hour': 'kiloDpmOveragePricePerHour',
        'plan_type': 'planType',
        'price_per_container_host_hour': 'pricePerContainerHostHour',
        'price_per_container_hour': 'pricePerContainerHour',
        'price_per_server_hour': 'pricePerServerHour',
        'sum_number_of_container_hosts': 'sumNumberOfContainerHosts',
        'sum_number_of_containers': 'sumNumberOfContainers',
        'sum_number_of_servers': 'sumNumberOfServers',
        'usage_amount': 'usageAmount',
        'used_plan': 'usedPlan',
        'user_discount': 'userDiscount'
    }

    def __init__(self, count_daily_data_points=None, day=None, discount=None, dpm_per_container_host_quota=None, dpm_per_host_quota=None, fixed_monthly_price=None, fixed_monthly_price_per_hour=None, free_containers_per_host=None, id=None, kilo_dpm_overage_price_per_hour=None, plan_type=None, price_per_container_host_hour=None, price_per_container_hour=None, price_per_server_hour=None, sum_number_of_container_hosts=None, sum_number_of_containers=None, sum_number_of_servers=None, usage_amount=None, used_plan=None, user_discount=None):  # noqa: E501
        """DayUsageData - a model defined in Swagger"""  # noqa: E501
        self._count_daily_data_points = None
        self._day = None
        self._discount = None
        self._dpm_per_container_host_quota = None
        self._dpm_per_host_quota = None
        self._fixed_monthly_price = None
        self._fixed_monthly_price_per_hour = None
        self._free_containers_per_host = None
        self._id = None
        self._kilo_dpm_overage_price_per_hour = None
        self._plan_type = None
        self._price_per_container_host_hour = None
        self._price_per_container_hour = None
        self._price_per_server_hour = None
        self._sum_number_of_container_hosts = None
        self._sum_number_of_containers = None
        self._sum_number_of_servers = None
        self._usage_amount = None
        self._used_plan = None
        self._user_discount = None
        self.discriminator = None
        if count_daily_data_points is not None:
            self.count_daily_data_points = count_daily_data_points
        if day is not None:
            self.day = day
        if discount is not None:
            self.discount = discount
        if dpm_per_container_host_quota is not None:
            self.dpm_per_container_host_quota = dpm_per_container_host_quota
        if dpm_per_host_quota is not None:
            self.dpm_per_host_quota = dpm_per_host_quota
        if fixed_monthly_price is not None:
            self.fixed_monthly_price = fixed_monthly_price
        if fixed_monthly_price_per_hour is not None:
            self.fixed_monthly_price_per_hour = fixed_monthly_price_per_hour
        if free_containers_per_host is not None:
            self.free_containers_per_host = free_containers_per_host
        if id is not None:
            self.id = id
        if kilo_dpm_overage_price_per_hour is not None:
            self.kilo_dpm_overage_price_per_hour = kilo_dpm_overage_price_per_hour
        if plan_type is not None:
            self.plan_type = plan_type
        if price_per_container_host_hour is not None:
            self.price_per_container_host_hour = price_per_container_host_hour
        if price_per_container_hour is not None:
            self.price_per_container_hour = price_per_container_hour
        if price_per_server_hour is not None:
            self.price_per_server_hour = price_per_server_hour
        if sum_number_of_container_hosts is not None:
            self.sum_number_of_container_hosts = sum_number_of_container_hosts
        if sum_number_of_containers is not None:
            self.sum_number_of_containers = sum_number_of_containers
        if sum_number_of_servers is not None:
            self.sum_number_of_servers = sum_number_of_servers
        if usage_amount is not None:
            self.usage_amount = usage_amount
        if used_plan is not None:
            self.used_plan = used_plan
        if user_discount is not None:
            self.user_discount = user_discount

    @property
    def count_daily_data_points(self):
        """Gets the count_daily_data_points of this DayUsageData.  # noqa: E501


        :return: The count_daily_data_points of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._count_daily_data_points

    @count_daily_data_points.setter
    def count_daily_data_points(self, count_daily_data_points):
        """Sets the count_daily_data_points of this DayUsageData.


        :param count_daily_data_points: The count_daily_data_points of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._count_daily_data_points = count_daily_data_points

    @property
    def day(self):
        """Gets the day of this DayUsageData.  # noqa: E501


        :return: The day of this DayUsageData.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DayUsageData.


        :param day: The day of this DayUsageData.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def discount(self):
        """Gets the discount of this DayUsageData.  # noqa: E501


        :return: The discount of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this DayUsageData.


        :param discount: The discount of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def dpm_per_container_host_quota(self):
        """Gets the dpm_per_container_host_quota of this DayUsageData.  # noqa: E501


        :return: The dpm_per_container_host_quota of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._dpm_per_container_host_quota

    @dpm_per_container_host_quota.setter
    def dpm_per_container_host_quota(self, dpm_per_container_host_quota):
        """Sets the dpm_per_container_host_quota of this DayUsageData.


        :param dpm_per_container_host_quota: The dpm_per_container_host_quota of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._dpm_per_container_host_quota = dpm_per_container_host_quota

    @property
    def dpm_per_host_quota(self):
        """Gets the dpm_per_host_quota of this DayUsageData.  # noqa: E501


        :return: The dpm_per_host_quota of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._dpm_per_host_quota

    @dpm_per_host_quota.setter
    def dpm_per_host_quota(self, dpm_per_host_quota):
        """Sets the dpm_per_host_quota of this DayUsageData.


        :param dpm_per_host_quota: The dpm_per_host_quota of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._dpm_per_host_quota = dpm_per_host_quota

    @property
    def fixed_monthly_price(self):
        """Gets the fixed_monthly_price of this DayUsageData.  # noqa: E501


        :return: The fixed_monthly_price of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._fixed_monthly_price

    @fixed_monthly_price.setter
    def fixed_monthly_price(self, fixed_monthly_price):
        """Sets the fixed_monthly_price of this DayUsageData.


        :param fixed_monthly_price: The fixed_monthly_price of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._fixed_monthly_price = fixed_monthly_price

    @property
    def fixed_monthly_price_per_hour(self):
        """Gets the fixed_monthly_price_per_hour of this DayUsageData.  # noqa: E501


        :return: The fixed_monthly_price_per_hour of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._fixed_monthly_price_per_hour

    @fixed_monthly_price_per_hour.setter
    def fixed_monthly_price_per_hour(self, fixed_monthly_price_per_hour):
        """Sets the fixed_monthly_price_per_hour of this DayUsageData.


        :param fixed_monthly_price_per_hour: The fixed_monthly_price_per_hour of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._fixed_monthly_price_per_hour = fixed_monthly_price_per_hour

    @property
    def free_containers_per_host(self):
        """Gets the free_containers_per_host of this DayUsageData.  # noqa: E501


        :return: The free_containers_per_host of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._free_containers_per_host

    @free_containers_per_host.setter
    def free_containers_per_host(self, free_containers_per_host):
        """Sets the free_containers_per_host of this DayUsageData.


        :param free_containers_per_host: The free_containers_per_host of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._free_containers_per_host = free_containers_per_host

    @property
    def id(self):
        """Gets the id of this DayUsageData.  # noqa: E501


        :return: The id of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DayUsageData.


        :param id: The id of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kilo_dpm_overage_price_per_hour(self):
        """Gets the kilo_dpm_overage_price_per_hour of this DayUsageData.  # noqa: E501


        :return: The kilo_dpm_overage_price_per_hour of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._kilo_dpm_overage_price_per_hour

    @kilo_dpm_overage_price_per_hour.setter
    def kilo_dpm_overage_price_per_hour(self, kilo_dpm_overage_price_per_hour):
        """Sets the kilo_dpm_overage_price_per_hour of this DayUsageData.


        :param kilo_dpm_overage_price_per_hour: The kilo_dpm_overage_price_per_hour of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._kilo_dpm_overage_price_per_hour = kilo_dpm_overage_price_per_hour

    @property
    def plan_type(self):
        """Gets the plan_type of this DayUsageData.  # noqa: E501


        :return: The plan_type of this DayUsageData.  # noqa: E501
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this DayUsageData.


        :param plan_type: The plan_type of this DayUsageData.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFRA", "PER_AGENT", "FIXED_PRICE", "PER_VOLUME"]  # noqa: E501
        if plan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(plan_type, allowed_values)
            )

        self._plan_type = plan_type

    @property
    def price_per_container_host_hour(self):
        """Gets the price_per_container_host_hour of this DayUsageData.  # noqa: E501


        :return: The price_per_container_host_hour of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._price_per_container_host_hour

    @price_per_container_host_hour.setter
    def price_per_container_host_hour(self, price_per_container_host_hour):
        """Sets the price_per_container_host_hour of this DayUsageData.


        :param price_per_container_host_hour: The price_per_container_host_hour of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._price_per_container_host_hour = price_per_container_host_hour

    @property
    def price_per_container_hour(self):
        """Gets the price_per_container_hour of this DayUsageData.  # noqa: E501


        :return: The price_per_container_hour of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._price_per_container_hour

    @price_per_container_hour.setter
    def price_per_container_hour(self, price_per_container_hour):
        """Sets the price_per_container_hour of this DayUsageData.


        :param price_per_container_hour: The price_per_container_hour of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._price_per_container_hour = price_per_container_hour

    @property
    def price_per_server_hour(self):
        """Gets the price_per_server_hour of this DayUsageData.  # noqa: E501


        :return: The price_per_server_hour of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._price_per_server_hour

    @price_per_server_hour.setter
    def price_per_server_hour(self, price_per_server_hour):
        """Sets the price_per_server_hour of this DayUsageData.


        :param price_per_server_hour: The price_per_server_hour of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._price_per_server_hour = price_per_server_hour

    @property
    def sum_number_of_container_hosts(self):
        """Gets the sum_number_of_container_hosts of this DayUsageData.  # noqa: E501


        :return: The sum_number_of_container_hosts of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._sum_number_of_container_hosts

    @sum_number_of_container_hosts.setter
    def sum_number_of_container_hosts(self, sum_number_of_container_hosts):
        """Sets the sum_number_of_container_hosts of this DayUsageData.


        :param sum_number_of_container_hosts: The sum_number_of_container_hosts of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._sum_number_of_container_hosts = sum_number_of_container_hosts

    @property
    def sum_number_of_containers(self):
        """Gets the sum_number_of_containers of this DayUsageData.  # noqa: E501


        :return: The sum_number_of_containers of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._sum_number_of_containers

    @sum_number_of_containers.setter
    def sum_number_of_containers(self, sum_number_of_containers):
        """Sets the sum_number_of_containers of this DayUsageData.


        :param sum_number_of_containers: The sum_number_of_containers of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._sum_number_of_containers = sum_number_of_containers

    @property
    def sum_number_of_servers(self):
        """Gets the sum_number_of_servers of this DayUsageData.  # noqa: E501


        :return: The sum_number_of_servers of this DayUsageData.  # noqa: E501
        :rtype: int
        """
        return self._sum_number_of_servers

    @sum_number_of_servers.setter
    def sum_number_of_servers(self, sum_number_of_servers):
        """Sets the sum_number_of_servers of this DayUsageData.


        :param sum_number_of_servers: The sum_number_of_servers of this DayUsageData.  # noqa: E501
        :type: int
        """

        self._sum_number_of_servers = sum_number_of_servers

    @property
    def usage_amount(self):
        """Gets the usage_amount of this DayUsageData.  # noqa: E501


        :return: The usage_amount of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._usage_amount

    @usage_amount.setter
    def usage_amount(self, usage_amount):
        """Sets the usage_amount of this DayUsageData.


        :param usage_amount: The usage_amount of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._usage_amount = usage_amount

    @property
    def used_plan(self):
        """Gets the used_plan of this DayUsageData.  # noqa: E501


        :return: The used_plan of this DayUsageData.  # noqa: E501
        :rtype: str
        """
        return self._used_plan

    @used_plan.setter
    def used_plan(self, used_plan):
        """Sets the used_plan of this DayUsageData.


        :param used_plan: The used_plan of this DayUsageData.  # noqa: E501
        :type: str
        """

        self._used_plan = used_plan

    @property
    def user_discount(self):
        """Gets the user_discount of this DayUsageData.  # noqa: E501


        :return: The user_discount of this DayUsageData.  # noqa: E501
        :rtype: float
        """
        return self._user_discount

    @user_discount.setter
    def user_discount(self, user_discount):
        """Sets the user_discount of this DayUsageData.


        :param user_discount: The user_discount of this DayUsageData.  # noqa: E501
        :type: float
        """

        self._user_discount = user_discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DayUsageData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DayUsageData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
