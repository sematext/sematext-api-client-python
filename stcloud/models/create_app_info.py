# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateAppInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_type': 'str',
        'discount_code': 'str',
        'initial_plan_id': 'int',
        'meta_data': 'AppMetadata',
        'name': 'str'
    }

    attribute_map = {
        'app_type': 'appType',
        'discount_code': 'discountCode',
        'initial_plan_id': 'initialPlanId',
        'meta_data': 'metaData',
        'name': 'name'
    }

    def __init__(self, app_type=None, discount_code=None, initial_plan_id=None, meta_data=None, name=None):  # noqa: E501
        """CreateAppInfo - a model defined in Swagger"""  # noqa: E501

        self._app_type = None
        self._discount_code = None
        self._initial_plan_id = None
        self._meta_data = None
        self._name = None
        self.discriminator = None

        if app_type is not None:
            self.app_type = app_type
        if discount_code is not None:
            self.discount_code = discount_code
        if initial_plan_id is not None:
            self.initial_plan_id = initial_plan_id
        if meta_data is not None:
            self.meta_data = meta_data
        if name is not None:
            self.name = name

    @property
    def app_type(self):
        """Gets the app_type of this CreateAppInfo.  # noqa: E501


        :return: The app_type of this CreateAppInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this CreateAppInfo.


        :param app_type: The app_type of this CreateAppInfo.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def discount_code(self):
        """Gets the discount_code of this CreateAppInfo.  # noqa: E501


        :return: The discount_code of this CreateAppInfo.  # noqa: E501
        :rtype: str
        """
        return self._discount_code

    @discount_code.setter
    def discount_code(self, discount_code):
        """Sets the discount_code of this CreateAppInfo.


        :param discount_code: The discount_code of this CreateAppInfo.  # noqa: E501
        :type: str
        """

        self._discount_code = discount_code

    @property
    def initial_plan_id(self):
        """Gets the initial_plan_id of this CreateAppInfo.  # noqa: E501


        :return: The initial_plan_id of this CreateAppInfo.  # noqa: E501
        :rtype: int
        """
        return self._initial_plan_id

    @initial_plan_id.setter
    def initial_plan_id(self, initial_plan_id):
        """Sets the initial_plan_id of this CreateAppInfo.


        :param initial_plan_id: The initial_plan_id of this CreateAppInfo.  # noqa: E501
        :type: int
        """

        self._initial_plan_id = initial_plan_id

    @property
    def meta_data(self):
        """Gets the meta_data of this CreateAppInfo.  # noqa: E501

        AWS app meta data. Applicable only for `aws` appType  # noqa: E501

        :return: The meta_data of this CreateAppInfo.  # noqa: E501
        :rtype: AppMetadata
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this CreateAppInfo.

        AWS app meta data. Applicable only for `aws` appType  # noqa: E501

        :param meta_data: The meta_data of this CreateAppInfo.  # noqa: E501
        :type: AppMetadata
        """

        self._meta_data = meta_data

    @property
    def name(self):
        """Gets the name of this CreateAppInfo.  # noqa: E501


        :return: The name of this CreateAppInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAppInfo.


        :param name: The name of this CreateAppInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAppInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAppInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
