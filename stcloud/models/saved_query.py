# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SavedQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_rule': 'AlertRule',
        'allow_modification': 'bool',
        'application_id': 'str',
        'application_name': 'str',
        'application_token': 'str',
        'creator_email': 'str',
        'id': 'str',
        'label_color': 'str',
        'logsene_alert_type': 'object',
        'owner_email': 'str',
        'query_name': 'str',
        'query_string': 'str',
        'user_permissions': 'UserPermissions'
    }

    attribute_map = {
        'alert_rule': 'alertRule',
        'allow_modification': 'allowModification',
        'application_id': 'applicationId',
        'application_name': 'applicationName',
        'application_token': 'applicationToken',
        'creator_email': 'creatorEmail',
        'id': 'id',
        'label_color': 'labelColor',
        'logsene_alert_type': 'logseneAlertType',
        'owner_email': 'ownerEmail',
        'query_name': 'queryName',
        'query_string': 'queryString',
        'user_permissions': 'userPermissions'
    }

    def __init__(self, alert_rule=None, allow_modification=None, application_id=None, application_name=None, application_token=None, creator_email=None, id=None, label_color=None, logsene_alert_type=None, owner_email=None, query_name=None, query_string=None, user_permissions=None):  # noqa: E501
        """SavedQuery - a model defined in Swagger"""  # noqa: E501

        self._alert_rule = None
        self._allow_modification = None
        self._application_id = None
        self._application_name = None
        self._application_token = None
        self._creator_email = None
        self._id = None
        self._label_color = None
        self._logsene_alert_type = None
        self._owner_email = None
        self._query_name = None
        self._query_string = None
        self._user_permissions = None
        self.discriminator = None

        if alert_rule is not None:
            self.alert_rule = alert_rule
        if allow_modification is not None:
            self.allow_modification = allow_modification
        if application_id is not None:
            self.application_id = application_id
        if application_name is not None:
            self.application_name = application_name
        if application_token is not None:
            self.application_token = application_token
        if creator_email is not None:
            self.creator_email = creator_email
        if id is not None:
            self.id = id
        if label_color is not None:
            self.label_color = label_color
        if logsene_alert_type is not None:
            self.logsene_alert_type = logsene_alert_type
        if owner_email is not None:
            self.owner_email = owner_email
        if query_name is not None:
            self.query_name = query_name
        if query_string is not None:
            self.query_string = query_string
        if user_permissions is not None:
            self.user_permissions = user_permissions

    @property
    def alert_rule(self):
        """Gets the alert_rule of this SavedQuery.  # noqa: E501


        :return: The alert_rule of this SavedQuery.  # noqa: E501
        :rtype: AlertRule
        """
        return self._alert_rule

    @alert_rule.setter
    def alert_rule(self, alert_rule):
        """Sets the alert_rule of this SavedQuery.


        :param alert_rule: The alert_rule of this SavedQuery.  # noqa: E501
        :type: AlertRule
        """

        self._alert_rule = alert_rule

    @property
    def allow_modification(self):
        """Gets the allow_modification of this SavedQuery.  # noqa: E501


        :return: The allow_modification of this SavedQuery.  # noqa: E501
        :rtype: bool
        """
        return self._allow_modification

    @allow_modification.setter
    def allow_modification(self, allow_modification):
        """Sets the allow_modification of this SavedQuery.


        :param allow_modification: The allow_modification of this SavedQuery.  # noqa: E501
        :type: bool
        """

        self._allow_modification = allow_modification

    @property
    def application_id(self):
        """Gets the application_id of this SavedQuery.  # noqa: E501


        :return: The application_id of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this SavedQuery.


        :param application_id: The application_id of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def application_name(self):
        """Gets the application_name of this SavedQuery.  # noqa: E501


        :return: The application_name of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this SavedQuery.


        :param application_name: The application_name of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def application_token(self):
        """Gets the application_token of this SavedQuery.  # noqa: E501


        :return: The application_token of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._application_token

    @application_token.setter
    def application_token(self, application_token):
        """Sets the application_token of this SavedQuery.


        :param application_token: The application_token of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._application_token = application_token

    @property
    def creator_email(self):
        """Gets the creator_email of this SavedQuery.  # noqa: E501


        :return: The creator_email of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this SavedQuery.


        :param creator_email: The creator_email of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._creator_email = creator_email

    @property
    def id(self):
        """Gets the id of this SavedQuery.  # noqa: E501


        :return: The id of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavedQuery.


        :param id: The id of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label_color(self):
        """Gets the label_color of this SavedQuery.  # noqa: E501


        :return: The label_color of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._label_color

    @label_color.setter
    def label_color(self, label_color):
        """Sets the label_color of this SavedQuery.


        :param label_color: The label_color of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._label_color = label_color

    @property
    def logsene_alert_type(self):
        """Gets the logsene_alert_type of this SavedQuery.  # noqa: E501


        :return: The logsene_alert_type of this SavedQuery.  # noqa: E501
        :rtype: object
        """
        return self._logsene_alert_type

    @logsene_alert_type.setter
    def logsene_alert_type(self, logsene_alert_type):
        """Sets the logsene_alert_type of this SavedQuery.


        :param logsene_alert_type: The logsene_alert_type of this SavedQuery.  # noqa: E501
        :type: object
        """

        self._logsene_alert_type = logsene_alert_type

    @property
    def owner_email(self):
        """Gets the owner_email of this SavedQuery.  # noqa: E501


        :return: The owner_email of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this SavedQuery.


        :param owner_email: The owner_email of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def query_name(self):
        """Gets the query_name of this SavedQuery.  # noqa: E501


        :return: The query_name of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._query_name

    @query_name.setter
    def query_name(self, query_name):
        """Sets the query_name of this SavedQuery.


        :param query_name: The query_name of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._query_name = query_name

    @property
    def query_string(self):
        """Gets the query_string of this SavedQuery.  # noqa: E501


        :return: The query_string of this SavedQuery.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this SavedQuery.


        :param query_string: The query_string of this SavedQuery.  # noqa: E501
        :type: str
        """

        self._query_string = query_string

    @property
    def user_permissions(self):
        """Gets the user_permissions of this SavedQuery.  # noqa: E501


        :return: The user_permissions of this SavedQuery.  # noqa: E501
        :rtype: UserPermissions
        """
        return self._user_permissions

    @user_permissions.setter
    def user_permissions(self, user_permissions):
        """Sets the user_permissions of this SavedQuery.


        :param user_permissions: The user_permissions of this SavedQuery.  # noqa: E501
        :type: UserPermissions
        """

        self._user_permissions = user_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavedQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
