# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_charges': 'list[ChargesDetailsResponseDto]',
        'invoice_date': 'str',
        'invoice_id': 'str',
        'period': 'str',
        'service': 'str',
        'total_amount': 'float'
    }

    attribute_map = {
        'all_charges': 'allCharges',
        'invoice_date': 'invoiceDate',
        'invoice_id': 'invoiceId',
        'period': 'period',
        'service': 'service',
        'total_amount': 'totalAmount'
    }

    def __init__(self, all_charges=None, invoice_date=None, invoice_id=None, period=None, service=None, total_amount=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        self._all_charges = None
        self._invoice_date = None
        self._invoice_id = None
        self._period = None
        self._service = None
        self._total_amount = None
        self.discriminator = None
        if all_charges is not None:
            self.all_charges = all_charges
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if period is not None:
            self.period = period
        if service is not None:
            self.service = service
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def all_charges(self):
        """Gets the all_charges of this Invoice.  # noqa: E501


        :return: The all_charges of this Invoice.  # noqa: E501
        :rtype: list[ChargesDetailsResponseDto]
        """
        return self._all_charges

    @all_charges.setter
    def all_charges(self, all_charges):
        """Sets the all_charges of this Invoice.


        :param all_charges: The all_charges of this Invoice.  # noqa: E501
        :type: list[ChargesDetailsResponseDto]
        """

        self._all_charges = all_charges

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.  # noqa: E501


        :return: The invoice_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.


        :param invoice_date: The invoice_date of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_date = invoice_date

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Invoice.  # noqa: E501


        :return: The invoice_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Invoice.


        :param invoice_id: The invoice_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def period(self):
        """Gets the period of this Invoice.  # noqa: E501


        :return: The period of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Invoice.


        :param period: The period of this Invoice.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def service(self):
        """Gets the service of this Invoice.  # noqa: E501


        :return: The service of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Invoice.


        :param service: The service of this Invoice.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def total_amount(self):
        """Gets the total_amount of this Invoice.  # noqa: E501


        :return: The total_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Invoice.


        :param total_amount: The total_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
