# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Plan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_type': 'str',
        'custom': 'bool',
        'data_retention_hours': 'float',
        'default_trial_plan': 'bool',
        'free': 'bool',
        'free_trial_days': 'int',
        'id': 'int',
        'max_alerts': 'int',
        'max_daily_events': 'int',
        'name': 'str',
        'plan_scheme': 'str',
        'sematext_service': 'str',
        'trial_plan': 'bool'
    }

    attribute_map = {
        'app_type': 'appType',
        'custom': 'custom',
        'data_retention_hours': 'dataRetentionHours',
        'default_trial_plan': 'defaultTrialPlan',
        'free': 'free',
        'free_trial_days': 'freeTrialDays',
        'id': 'id',
        'max_alerts': 'maxAlerts',
        'max_daily_events': 'maxDailyEvents',
        'name': 'name',
        'plan_scheme': 'planScheme',
        'sematext_service': 'sematextService',
        'trial_plan': 'trialPlan'
    }

    def __init__(self, app_type=None, custom=None, data_retention_hours=None, default_trial_plan=None, free=None, free_trial_days=None, id=None, max_alerts=None, max_daily_events=None, name=None, plan_scheme=None, sematext_service=None, trial_plan=None):  # noqa: E501
        """Plan - a model defined in Swagger"""  # noqa: E501
        self._app_type = None
        self._custom = None
        self._data_retention_hours = None
        self._default_trial_plan = None
        self._free = None
        self._free_trial_days = None
        self._id = None
        self._max_alerts = None
        self._max_daily_events = None
        self._name = None
        self._plan_scheme = None
        self._sematext_service = None
        self._trial_plan = None
        self.discriminator = None
        if app_type is not None:
            self.app_type = app_type
        if custom is not None:
            self.custom = custom
        if data_retention_hours is not None:
            self.data_retention_hours = data_retention_hours
        if default_trial_plan is not None:
            self.default_trial_plan = default_trial_plan
        if free is not None:
            self.free = free
        if free_trial_days is not None:
            self.free_trial_days = free_trial_days
        if id is not None:
            self.id = id
        if max_alerts is not None:
            self.max_alerts = max_alerts
        if max_daily_events is not None:
            self.max_daily_events = max_daily_events
        if name is not None:
            self.name = name
        if plan_scheme is not None:
            self.plan_scheme = plan_scheme
        if sematext_service is not None:
            self.sematext_service = sematext_service
        if trial_plan is not None:
            self.trial_plan = trial_plan

    @property
    def app_type(self):
        """Gets the app_type of this Plan.  # noqa: E501


        :return: The app_type of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this Plan.


        :param app_type: The app_type of this Plan.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def custom(self):
        """Gets the custom of this Plan.  # noqa: E501


        :return: The custom of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Plan.


        :param custom: The custom of this Plan.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def data_retention_hours(self):
        """Gets the data_retention_hours of this Plan.  # noqa: E501


        :return: The data_retention_hours of this Plan.  # noqa: E501
        :rtype: float
        """
        return self._data_retention_hours

    @data_retention_hours.setter
    def data_retention_hours(self, data_retention_hours):
        """Sets the data_retention_hours of this Plan.


        :param data_retention_hours: The data_retention_hours of this Plan.  # noqa: E501
        :type: float
        """

        self._data_retention_hours = data_retention_hours

    @property
    def default_trial_plan(self):
        """Gets the default_trial_plan of this Plan.  # noqa: E501


        :return: The default_trial_plan of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._default_trial_plan

    @default_trial_plan.setter
    def default_trial_plan(self, default_trial_plan):
        """Sets the default_trial_plan of this Plan.


        :param default_trial_plan: The default_trial_plan of this Plan.  # noqa: E501
        :type: bool
        """

        self._default_trial_plan = default_trial_plan

    @property
    def free(self):
        """Gets the free of this Plan.  # noqa: E501


        :return: The free of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this Plan.


        :param free: The free of this Plan.  # noqa: E501
        :type: bool
        """

        self._free = free

    @property
    def free_trial_days(self):
        """Gets the free_trial_days of this Plan.  # noqa: E501


        :return: The free_trial_days of this Plan.  # noqa: E501
        :rtype: int
        """
        return self._free_trial_days

    @free_trial_days.setter
    def free_trial_days(self, free_trial_days):
        """Sets the free_trial_days of this Plan.


        :param free_trial_days: The free_trial_days of this Plan.  # noqa: E501
        :type: int
        """

        self._free_trial_days = free_trial_days

    @property
    def id(self):
        """Gets the id of this Plan.  # noqa: E501


        :return: The id of this Plan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.


        :param id: The id of this Plan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def max_alerts(self):
        """Gets the max_alerts of this Plan.  # noqa: E501


        :return: The max_alerts of this Plan.  # noqa: E501
        :rtype: int
        """
        return self._max_alerts

    @max_alerts.setter
    def max_alerts(self, max_alerts):
        """Sets the max_alerts of this Plan.


        :param max_alerts: The max_alerts of this Plan.  # noqa: E501
        :type: int
        """

        self._max_alerts = max_alerts

    @property
    def max_daily_events(self):
        """Gets the max_daily_events of this Plan.  # noqa: E501


        :return: The max_daily_events of this Plan.  # noqa: E501
        :rtype: int
        """
        return self._max_daily_events

    @max_daily_events.setter
    def max_daily_events(self, max_daily_events):
        """Sets the max_daily_events of this Plan.


        :param max_daily_events: The max_daily_events of this Plan.  # noqa: E501
        :type: int
        """

        self._max_daily_events = max_daily_events

    @property
    def name(self):
        """Gets the name of this Plan.  # noqa: E501


        :return: The name of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.


        :param name: The name of this Plan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plan_scheme(self):
        """Gets the plan_scheme of this Plan.  # noqa: E501


        :return: The plan_scheme of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._plan_scheme

    @plan_scheme.setter
    def plan_scheme(self, plan_scheme):
        """Sets the plan_scheme of this Plan.


        :param plan_scheme: The plan_scheme of this Plan.  # noqa: E501
        :type: str
        """
        allowed_values = ["SPM_1_0", "SPM_2_0", "SEARCHENE_1_0", "LOGSENE_1_0", "LOGSENE_2_0", "RUM_1_0", "RUM_1_1", "RUM_EA", "SYNTHETICS_EA", "SYNTHETICS_1_0", "BUGZ_EA"]  # noqa: E501
        if plan_scheme not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_scheme` ({0}), must be one of {1}"  # noqa: E501
                .format(plan_scheme, allowed_values)
            )

        self._plan_scheme = plan_scheme

    @property
    def sematext_service(self):
        """Gets the sematext_service of this Plan.  # noqa: E501


        :return: The sematext_service of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._sematext_service

    @sematext_service.setter
    def sematext_service(self, sematext_service):
        """Sets the sematext_service of this Plan.


        :param sematext_service: The sematext_service of this Plan.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOGSENE", "SPM", "RUM", "SYNTHETICS"]  # noqa: E501
        if sematext_service not in allowed_values:
            raise ValueError(
                "Invalid value for `sematext_service` ({0}), must be one of {1}"  # noqa: E501
                .format(sematext_service, allowed_values)
            )

        self._sematext_service = sematext_service

    @property
    def trial_plan(self):
        """Gets the trial_plan of this Plan.  # noqa: E501


        :return: The trial_plan of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._trial_plan

    @trial_plan.setter
    def trial_plan(self, trial_plan):
        """Sets the trial_plan of this Plan.


        :param trial_plan: The trial_plan of this Plan.  # noqa: E501
        :type: bool
        """

        self._trial_plan = trial_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Plan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
