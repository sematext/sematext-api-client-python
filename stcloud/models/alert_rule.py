# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_email': 'str',
        'allowed_app_types': 'list[int]',
        'analyzing_time': 'str',
        'app_display_state': 'str',
        'app_id': 'int',
        'app_name': 'str',
        'app_state': 'str',
        'app_token': 'str',
        'app_type': 'str',
        'back_to_normal_needed': 'bool',
        'chart_key': 'str',
        'color': 'str',
        'creator_email': 'str',
        'default_agg_type': 'str',
        'description': 'str',
        'disallowed_app_types': 'list[int]',
        'enabled': 'bool',
        'estimate_operation': 'str',
        'estimate_value': 'float',
        'filter_values': 'str',
        'filter_values_obj': 'list[FilterValue]',
        'ignore_regular_events_enabled': 'bool',
        'integrations': 'str',
        'last_data_received_date': 'int',
        'last_sent': 'int',
        'last_triggered': 'int',
        'metadata': 'object',
        'metric_key': 'str',
        'metric_label': 'str',
        'min_delay_between_notifications_in_minutes': 'str',
        'name': 'str',
        'notification_emails': 'list[str]',
        'notification_integrations': 'list[NotificationIntegration]',
        'notifications_enabled': 'bool',
        'query': 'str',
        'report_name': 'str',
        'rule_key': 'int',
        'rule_type': 'str',
        'runbook': 'str',
        'saved_query_id': 'int',
        'schedule': 'list[AlertRuleScheduleWeekdayDto]',
        'sematext_service': 'str',
        'send_to_email': 'str',
        'timezone': 'str',
        'use_only_alert_rule_integrations': 'bool',
        'user_permissions': 'UserPermissions',
        'value_column_name': 'str',
        'value_name': 'str'
    }

    attribute_map = {
        'account_email': 'accountEmail',
        'allowed_app_types': 'allowedAppTypes',
        'analyzing_time': 'analyzingTime',
        'app_display_state': 'appDisplayState',
        'app_id': 'appId',
        'app_name': 'appName',
        'app_state': 'appState',
        'app_token': 'appToken',
        'app_type': 'appType',
        'back_to_normal_needed': 'backToNormalNeeded',
        'chart_key': 'chartKey',
        'color': 'color',
        'creator_email': 'creatorEmail',
        'default_agg_type': 'defaultAggType',
        'description': 'description',
        'disallowed_app_types': 'disallowedAppTypes',
        'enabled': 'enabled',
        'estimate_operation': 'estimateOperation',
        'estimate_value': 'estimateValue',
        'filter_values': 'filterValues',
        'filter_values_obj': 'filterValuesObj',
        'ignore_regular_events_enabled': 'ignoreRegularEventsEnabled',
        'integrations': 'integrations',
        'last_data_received_date': 'lastDataReceivedDate',
        'last_sent': 'lastSent',
        'last_triggered': 'lastTriggered',
        'metadata': 'metadata',
        'metric_key': 'metricKey',
        'metric_label': 'metricLabel',
        'min_delay_between_notifications_in_minutes': 'minDelayBetweenNotificationsInMinutes',
        'name': 'name',
        'notification_emails': 'notificationEmails',
        'notification_integrations': 'notificationIntegrations',
        'notifications_enabled': 'notificationsEnabled',
        'query': 'query',
        'report_name': 'reportName',
        'rule_key': 'ruleKey',
        'rule_type': 'ruleType',
        'runbook': 'runbook',
        'saved_query_id': 'savedQueryId',
        'schedule': 'schedule',
        'sematext_service': 'sematextService',
        'send_to_email': 'sendToEmail',
        'timezone': 'timezone',
        'use_only_alert_rule_integrations': 'useOnlyAlertRuleIntegrations',
        'user_permissions': 'userPermissions',
        'value_column_name': 'valueColumnName',
        'value_name': 'valueName'
    }

    def __init__(self, account_email=None, allowed_app_types=None, analyzing_time=None, app_display_state=None, app_id=None, app_name=None, app_state=None, app_token=None, app_type=None, back_to_normal_needed=None, chart_key=None, color=None, creator_email=None, default_agg_type=None, description=None, disallowed_app_types=None, enabled=None, estimate_operation=None, estimate_value=None, filter_values=None, filter_values_obj=None, ignore_regular_events_enabled=None, integrations=None, last_data_received_date=None, last_sent=None, last_triggered=None, metadata=None, metric_key=None, metric_label=None, min_delay_between_notifications_in_minutes=None, name=None, notification_emails=None, notification_integrations=None, notifications_enabled=None, query=None, report_name=None, rule_key=None, rule_type=None, runbook=None, saved_query_id=None, schedule=None, sematext_service=None, send_to_email=None, timezone=None, use_only_alert_rule_integrations=None, user_permissions=None, value_column_name=None, value_name=None):  # noqa: E501
        """AlertRule - a model defined in Swagger"""  # noqa: E501
        self._account_email = None
        self._allowed_app_types = None
        self._analyzing_time = None
        self._app_display_state = None
        self._app_id = None
        self._app_name = None
        self._app_state = None
        self._app_token = None
        self._app_type = None
        self._back_to_normal_needed = None
        self._chart_key = None
        self._color = None
        self._creator_email = None
        self._default_agg_type = None
        self._description = None
        self._disallowed_app_types = None
        self._enabled = None
        self._estimate_operation = None
        self._estimate_value = None
        self._filter_values = None
        self._filter_values_obj = None
        self._ignore_regular_events_enabled = None
        self._integrations = None
        self._last_data_received_date = None
        self._last_sent = None
        self._last_triggered = None
        self._metadata = None
        self._metric_key = None
        self._metric_label = None
        self._min_delay_between_notifications_in_minutes = None
        self._name = None
        self._notification_emails = None
        self._notification_integrations = None
        self._notifications_enabled = None
        self._query = None
        self._report_name = None
        self._rule_key = None
        self._rule_type = None
        self._runbook = None
        self._saved_query_id = None
        self._schedule = None
        self._sematext_service = None
        self._send_to_email = None
        self._timezone = None
        self._use_only_alert_rule_integrations = None
        self._user_permissions = None
        self._value_column_name = None
        self._value_name = None
        self.discriminator = None
        if account_email is not None:
            self.account_email = account_email
        if allowed_app_types is not None:
            self.allowed_app_types = allowed_app_types
        if analyzing_time is not None:
            self.analyzing_time = analyzing_time
        if app_display_state is not None:
            self.app_display_state = app_display_state
        if app_id is not None:
            self.app_id = app_id
        if app_name is not None:
            self.app_name = app_name
        if app_state is not None:
            self.app_state = app_state
        if app_token is not None:
            self.app_token = app_token
        if app_type is not None:
            self.app_type = app_type
        if back_to_normal_needed is not None:
            self.back_to_normal_needed = back_to_normal_needed
        if chart_key is not None:
            self.chart_key = chart_key
        if color is not None:
            self.color = color
        if creator_email is not None:
            self.creator_email = creator_email
        if default_agg_type is not None:
            self.default_agg_type = default_agg_type
        if description is not None:
            self.description = description
        if disallowed_app_types is not None:
            self.disallowed_app_types = disallowed_app_types
        if enabled is not None:
            self.enabled = enabled
        if estimate_operation is not None:
            self.estimate_operation = estimate_operation
        if estimate_value is not None:
            self.estimate_value = estimate_value
        if filter_values is not None:
            self.filter_values = filter_values
        if filter_values_obj is not None:
            self.filter_values_obj = filter_values_obj
        if ignore_regular_events_enabled is not None:
            self.ignore_regular_events_enabled = ignore_regular_events_enabled
        if integrations is not None:
            self.integrations = integrations
        if last_data_received_date is not None:
            self.last_data_received_date = last_data_received_date
        if last_sent is not None:
            self.last_sent = last_sent
        if last_triggered is not None:
            self.last_triggered = last_triggered
        if metadata is not None:
            self.metadata = metadata
        if metric_key is not None:
            self.metric_key = metric_key
        if metric_label is not None:
            self.metric_label = metric_label
        if min_delay_between_notifications_in_minutes is not None:
            self.min_delay_between_notifications_in_minutes = min_delay_between_notifications_in_minutes
        if name is not None:
            self.name = name
        if notification_emails is not None:
            self.notification_emails = notification_emails
        if notification_integrations is not None:
            self.notification_integrations = notification_integrations
        if notifications_enabled is not None:
            self.notifications_enabled = notifications_enabled
        if query is not None:
            self.query = query
        if report_name is not None:
            self.report_name = report_name
        if rule_key is not None:
            self.rule_key = rule_key
        if rule_type is not None:
            self.rule_type = rule_type
        if runbook is not None:
            self.runbook = runbook
        if saved_query_id is not None:
            self.saved_query_id = saved_query_id
        if schedule is not None:
            self.schedule = schedule
        if sematext_service is not None:
            self.sematext_service = sematext_service
        if send_to_email is not None:
            self.send_to_email = send_to_email
        if timezone is not None:
            self.timezone = timezone
        if use_only_alert_rule_integrations is not None:
            self.use_only_alert_rule_integrations = use_only_alert_rule_integrations
        if user_permissions is not None:
            self.user_permissions = user_permissions
        if value_column_name is not None:
            self.value_column_name = value_column_name
        if value_name is not None:
            self.value_name = value_name

    @property
    def account_email(self):
        """Gets the account_email of this AlertRule.  # noqa: E501


        :return: The account_email of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._account_email

    @account_email.setter
    def account_email(self, account_email):
        """Sets the account_email of this AlertRule.


        :param account_email: The account_email of this AlertRule.  # noqa: E501
        :type: str
        """

        self._account_email = account_email

    @property
    def allowed_app_types(self):
        """Gets the allowed_app_types of this AlertRule.  # noqa: E501


        :return: The allowed_app_types of this AlertRule.  # noqa: E501
        :rtype: list[int]
        """
        return self._allowed_app_types

    @allowed_app_types.setter
    def allowed_app_types(self, allowed_app_types):
        """Sets the allowed_app_types of this AlertRule.


        :param allowed_app_types: The allowed_app_types of this AlertRule.  # noqa: E501
        :type: list[int]
        """

        self._allowed_app_types = allowed_app_types

    @property
    def analyzing_time(self):
        """Gets the analyzing_time of this AlertRule.  # noqa: E501


        :return: The analyzing_time of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._analyzing_time

    @analyzing_time.setter
    def analyzing_time(self, analyzing_time):
        """Sets the analyzing_time of this AlertRule.


        :param analyzing_time: The analyzing_time of this AlertRule.  # noqa: E501
        :type: str
        """

        self._analyzing_time = analyzing_time

    @property
    def app_display_state(self):
        """Gets the app_display_state of this AlertRule.  # noqa: E501


        :return: The app_display_state of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._app_display_state

    @app_display_state.setter
    def app_display_state(self, app_display_state):
        """Sets the app_display_state of this AlertRule.


        :param app_display_state: The app_display_state of this AlertRule.  # noqa: E501
        :type: str
        """

        self._app_display_state = app_display_state

    @property
    def app_id(self):
        """Gets the app_id of this AlertRule.  # noqa: E501


        :return: The app_id of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AlertRule.


        :param app_id: The app_id of this AlertRule.  # noqa: E501
        :type: int
        """

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this AlertRule.  # noqa: E501


        :return: The app_name of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AlertRule.


        :param app_name: The app_name of this AlertRule.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_state(self):
        """Gets the app_state of this AlertRule.  # noqa: E501


        :return: The app_state of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._app_state

    @app_state.setter
    def app_state(self, app_state):
        """Sets the app_state of this AlertRule.


        :param app_state: The app_state of this AlertRule.  # noqa: E501
        :type: str
        """

        self._app_state = app_state

    @property
    def app_token(self):
        """Gets the app_token of this AlertRule.  # noqa: E501


        :return: The app_token of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._app_token

    @app_token.setter
    def app_token(self, app_token):
        """Sets the app_token of this AlertRule.


        :param app_token: The app_token of this AlertRule.  # noqa: E501
        :type: str
        """

        self._app_token = app_token

    @property
    def app_type(self):
        """Gets the app_type of this AlertRule.  # noqa: E501


        :return: The app_type of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this AlertRule.


        :param app_type: The app_type of this AlertRule.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def back_to_normal_needed(self):
        """Gets the back_to_normal_needed of this AlertRule.  # noqa: E501


        :return: The back_to_normal_needed of this AlertRule.  # noqa: E501
        :rtype: bool
        """
        return self._back_to_normal_needed

    @back_to_normal_needed.setter
    def back_to_normal_needed(self, back_to_normal_needed):
        """Sets the back_to_normal_needed of this AlertRule.


        :param back_to_normal_needed: The back_to_normal_needed of this AlertRule.  # noqa: E501
        :type: bool
        """

        self._back_to_normal_needed = back_to_normal_needed

    @property
    def chart_key(self):
        """Gets the chart_key of this AlertRule.  # noqa: E501


        :return: The chart_key of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._chart_key

    @chart_key.setter
    def chart_key(self, chart_key):
        """Sets the chart_key of this AlertRule.


        :param chart_key: The chart_key of this AlertRule.  # noqa: E501
        :type: str
        """

        self._chart_key = chart_key

    @property
    def color(self):
        """Gets the color of this AlertRule.  # noqa: E501


        :return: The color of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AlertRule.


        :param color: The color of this AlertRule.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def creator_email(self):
        """Gets the creator_email of this AlertRule.  # noqa: E501


        :return: The creator_email of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this AlertRule.


        :param creator_email: The creator_email of this AlertRule.  # noqa: E501
        :type: str
        """

        self._creator_email = creator_email

    @property
    def default_agg_type(self):
        """Gets the default_agg_type of this AlertRule.  # noqa: E501


        :return: The default_agg_type of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._default_agg_type

    @default_agg_type.setter
    def default_agg_type(self, default_agg_type):
        """Sets the default_agg_type of this AlertRule.


        :param default_agg_type: The default_agg_type of this AlertRule.  # noqa: E501
        :type: str
        """

        self._default_agg_type = default_agg_type

    @property
    def description(self):
        """Gets the description of this AlertRule.  # noqa: E501


        :return: The description of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertRule.


        :param description: The description of this AlertRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disallowed_app_types(self):
        """Gets the disallowed_app_types of this AlertRule.  # noqa: E501


        :return: The disallowed_app_types of this AlertRule.  # noqa: E501
        :rtype: list[int]
        """
        return self._disallowed_app_types

    @disallowed_app_types.setter
    def disallowed_app_types(self, disallowed_app_types):
        """Sets the disallowed_app_types of this AlertRule.


        :param disallowed_app_types: The disallowed_app_types of this AlertRule.  # noqa: E501
        :type: list[int]
        """

        self._disallowed_app_types = disallowed_app_types

    @property
    def enabled(self):
        """Gets the enabled of this AlertRule.  # noqa: E501


        :return: The enabled of this AlertRule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AlertRule.


        :param enabled: The enabled of this AlertRule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def estimate_operation(self):
        """Gets the estimate_operation of this AlertRule.  # noqa: E501


        :return: The estimate_operation of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._estimate_operation

    @estimate_operation.setter
    def estimate_operation(self, estimate_operation):
        """Sets the estimate_operation of this AlertRule.


        :param estimate_operation: The estimate_operation of this AlertRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["LESS", "MORE", "EQUAL", "UN_EQUAL", "LESS_OR_EQUAL", "MORE_OR_EQUAL"]  # noqa: E501
        if estimate_operation not in allowed_values:
            raise ValueError(
                "Invalid value for `estimate_operation` ({0}), must be one of {1}"  # noqa: E501
                .format(estimate_operation, allowed_values)
            )

        self._estimate_operation = estimate_operation

    @property
    def estimate_value(self):
        """Gets the estimate_value of this AlertRule.  # noqa: E501


        :return: The estimate_value of this AlertRule.  # noqa: E501
        :rtype: float
        """
        return self._estimate_value

    @estimate_value.setter
    def estimate_value(self, estimate_value):
        """Sets the estimate_value of this AlertRule.


        :param estimate_value: The estimate_value of this AlertRule.  # noqa: E501
        :type: float
        """

        self._estimate_value = estimate_value

    @property
    def filter_values(self):
        """Gets the filter_values of this AlertRule.  # noqa: E501


        :return: The filter_values of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._filter_values

    @filter_values.setter
    def filter_values(self, filter_values):
        """Sets the filter_values of this AlertRule.


        :param filter_values: The filter_values of this AlertRule.  # noqa: E501
        :type: str
        """

        self._filter_values = filter_values

    @property
    def filter_values_obj(self):
        """Gets the filter_values_obj of this AlertRule.  # noqa: E501


        :return: The filter_values_obj of this AlertRule.  # noqa: E501
        :rtype: list[FilterValue]
        """
        return self._filter_values_obj

    @filter_values_obj.setter
    def filter_values_obj(self, filter_values_obj):
        """Sets the filter_values_obj of this AlertRule.


        :param filter_values_obj: The filter_values_obj of this AlertRule.  # noqa: E501
        :type: list[FilterValue]
        """

        self._filter_values_obj = filter_values_obj

    @property
    def ignore_regular_events_enabled(self):
        """Gets the ignore_regular_events_enabled of this AlertRule.  # noqa: E501


        :return: The ignore_regular_events_enabled of this AlertRule.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_regular_events_enabled

    @ignore_regular_events_enabled.setter
    def ignore_regular_events_enabled(self, ignore_regular_events_enabled):
        """Sets the ignore_regular_events_enabled of this AlertRule.


        :param ignore_regular_events_enabled: The ignore_regular_events_enabled of this AlertRule.  # noqa: E501
        :type: bool
        """

        self._ignore_regular_events_enabled = ignore_regular_events_enabled

    @property
    def integrations(self):
        """Gets the integrations of this AlertRule.  # noqa: E501


        :return: The integrations of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this AlertRule.


        :param integrations: The integrations of this AlertRule.  # noqa: E501
        :type: str
        """

        self._integrations = integrations

    @property
    def last_data_received_date(self):
        """Gets the last_data_received_date of this AlertRule.  # noqa: E501


        :return: The last_data_received_date of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._last_data_received_date

    @last_data_received_date.setter
    def last_data_received_date(self, last_data_received_date):
        """Sets the last_data_received_date of this AlertRule.


        :param last_data_received_date: The last_data_received_date of this AlertRule.  # noqa: E501
        :type: int
        """

        self._last_data_received_date = last_data_received_date

    @property
    def last_sent(self):
        """Gets the last_sent of this AlertRule.  # noqa: E501


        :return: The last_sent of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._last_sent

    @last_sent.setter
    def last_sent(self, last_sent):
        """Sets the last_sent of this AlertRule.


        :param last_sent: The last_sent of this AlertRule.  # noqa: E501
        :type: int
        """

        self._last_sent = last_sent

    @property
    def last_triggered(self):
        """Gets the last_triggered of this AlertRule.  # noqa: E501


        :return: The last_triggered of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._last_triggered

    @last_triggered.setter
    def last_triggered(self, last_triggered):
        """Sets the last_triggered of this AlertRule.


        :param last_triggered: The last_triggered of this AlertRule.  # noqa: E501
        :type: int
        """

        self._last_triggered = last_triggered

    @property
    def metadata(self):
        """Gets the metadata of this AlertRule.  # noqa: E501


        :return: The metadata of this AlertRule.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AlertRule.


        :param metadata: The metadata of this AlertRule.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def metric_key(self):
        """Gets the metric_key of this AlertRule.  # noqa: E501


        :return: The metric_key of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._metric_key

    @metric_key.setter
    def metric_key(self, metric_key):
        """Sets the metric_key of this AlertRule.


        :param metric_key: The metric_key of this AlertRule.  # noqa: E501
        :type: str
        """

        self._metric_key = metric_key

    @property
    def metric_label(self):
        """Gets the metric_label of this AlertRule.  # noqa: E501


        :return: The metric_label of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._metric_label

    @metric_label.setter
    def metric_label(self, metric_label):
        """Sets the metric_label of this AlertRule.


        :param metric_label: The metric_label of this AlertRule.  # noqa: E501
        :type: str
        """

        self._metric_label = metric_label

    @property
    def min_delay_between_notifications_in_minutes(self):
        """Gets the min_delay_between_notifications_in_minutes of this AlertRule.  # noqa: E501


        :return: The min_delay_between_notifications_in_minutes of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._min_delay_between_notifications_in_minutes

    @min_delay_between_notifications_in_minutes.setter
    def min_delay_between_notifications_in_minutes(self, min_delay_between_notifications_in_minutes):
        """Sets the min_delay_between_notifications_in_minutes of this AlertRule.


        :param min_delay_between_notifications_in_minutes: The min_delay_between_notifications_in_minutes of this AlertRule.  # noqa: E501
        :type: str
        """

        self._min_delay_between_notifications_in_minutes = min_delay_between_notifications_in_minutes

    @property
    def name(self):
        """Gets the name of this AlertRule.  # noqa: E501


        :return: The name of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertRule.


        :param name: The name of this AlertRule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notification_emails(self):
        """Gets the notification_emails of this AlertRule.  # noqa: E501


        :return: The notification_emails of this AlertRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_emails

    @notification_emails.setter
    def notification_emails(self, notification_emails):
        """Sets the notification_emails of this AlertRule.


        :param notification_emails: The notification_emails of this AlertRule.  # noqa: E501
        :type: list[str]
        """

        self._notification_emails = notification_emails

    @property
    def notification_integrations(self):
        """Gets the notification_integrations of this AlertRule.  # noqa: E501


        :return: The notification_integrations of this AlertRule.  # noqa: E501
        :rtype: list[NotificationIntegration]
        """
        return self._notification_integrations

    @notification_integrations.setter
    def notification_integrations(self, notification_integrations):
        """Sets the notification_integrations of this AlertRule.


        :param notification_integrations: The notification_integrations of this AlertRule.  # noqa: E501
        :type: list[NotificationIntegration]
        """

        self._notification_integrations = notification_integrations

    @property
    def notifications_enabled(self):
        """Gets the notifications_enabled of this AlertRule.  # noqa: E501


        :return: The notifications_enabled of this AlertRule.  # noqa: E501
        :rtype: bool
        """
        return self._notifications_enabled

    @notifications_enabled.setter
    def notifications_enabled(self, notifications_enabled):
        """Sets the notifications_enabled of this AlertRule.


        :param notifications_enabled: The notifications_enabled of this AlertRule.  # noqa: E501
        :type: bool
        """

        self._notifications_enabled = notifications_enabled

    @property
    def query(self):
        """Gets the query of this AlertRule.  # noqa: E501


        :return: The query of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AlertRule.


        :param query: The query of this AlertRule.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def report_name(self):
        """Gets the report_name of this AlertRule.  # noqa: E501


        :return: The report_name of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this AlertRule.


        :param report_name: The report_name of this AlertRule.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def rule_key(self):
        """Gets the rule_key of this AlertRule.  # noqa: E501


        :return: The rule_key of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._rule_key

    @rule_key.setter
    def rule_key(self, rule_key):
        """Sets the rule_key of this AlertRule.


        :param rule_key: The rule_key of this AlertRule.  # noqa: E501
        :type: int
        """

        self._rule_key = rule_key

    @property
    def rule_type(self):
        """Gets the rule_type of this AlertRule.  # noqa: E501


        :return: The rule_type of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this AlertRule.


        :param rule_type: The rule_type of this AlertRule.  # noqa: E501
        :type: str
        """

        self._rule_type = rule_type

    @property
    def runbook(self):
        """Gets the runbook of this AlertRule.  # noqa: E501


        :return: The runbook of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._runbook

    @runbook.setter
    def runbook(self, runbook):
        """Sets the runbook of this AlertRule.


        :param runbook: The runbook of this AlertRule.  # noqa: E501
        :type: str
        """

        self._runbook = runbook

    @property
    def saved_query_id(self):
        """Gets the saved_query_id of this AlertRule.  # noqa: E501


        :return: The saved_query_id of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._saved_query_id

    @saved_query_id.setter
    def saved_query_id(self, saved_query_id):
        """Sets the saved_query_id of this AlertRule.


        :param saved_query_id: The saved_query_id of this AlertRule.  # noqa: E501
        :type: int
        """

        self._saved_query_id = saved_query_id

    @property
    def schedule(self):
        """Gets the schedule of this AlertRule.  # noqa: E501


        :return: The schedule of this AlertRule.  # noqa: E501
        :rtype: list[AlertRuleScheduleWeekdayDto]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this AlertRule.


        :param schedule: The schedule of this AlertRule.  # noqa: E501
        :type: list[AlertRuleScheduleWeekdayDto]
        """

        self._schedule = schedule

    @property
    def sematext_service(self):
        """Gets the sematext_service of this AlertRule.  # noqa: E501


        :return: The sematext_service of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._sematext_service

    @sematext_service.setter
    def sematext_service(self, sematext_service):
        """Sets the sematext_service of this AlertRule.


        :param sematext_service: The sematext_service of this AlertRule.  # noqa: E501
        :type: str
        """

        self._sematext_service = sematext_service

    @property
    def send_to_email(self):
        """Gets the send_to_email of this AlertRule.  # noqa: E501


        :return: The send_to_email of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._send_to_email

    @send_to_email.setter
    def send_to_email(self, send_to_email):
        """Sets the send_to_email of this AlertRule.


        :param send_to_email: The send_to_email of this AlertRule.  # noqa: E501
        :type: str
        """

        self._send_to_email = send_to_email

    @property
    def timezone(self):
        """Gets the timezone of this AlertRule.  # noqa: E501


        :return: The timezone of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AlertRule.


        :param timezone: The timezone of this AlertRule.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def use_only_alert_rule_integrations(self):
        """Gets the use_only_alert_rule_integrations of this AlertRule.  # noqa: E501


        :return: The use_only_alert_rule_integrations of this AlertRule.  # noqa: E501
        :rtype: bool
        """
        return self._use_only_alert_rule_integrations

    @use_only_alert_rule_integrations.setter
    def use_only_alert_rule_integrations(self, use_only_alert_rule_integrations):
        """Sets the use_only_alert_rule_integrations of this AlertRule.


        :param use_only_alert_rule_integrations: The use_only_alert_rule_integrations of this AlertRule.  # noqa: E501
        :type: bool
        """

        self._use_only_alert_rule_integrations = use_only_alert_rule_integrations

    @property
    def user_permissions(self):
        """Gets the user_permissions of this AlertRule.  # noqa: E501


        :return: The user_permissions of this AlertRule.  # noqa: E501
        :rtype: UserPermissions
        """
        return self._user_permissions

    @user_permissions.setter
    def user_permissions(self, user_permissions):
        """Sets the user_permissions of this AlertRule.


        :param user_permissions: The user_permissions of this AlertRule.  # noqa: E501
        :type: UserPermissions
        """

        self._user_permissions = user_permissions

    @property
    def value_column_name(self):
        """Gets the value_column_name of this AlertRule.  # noqa: E501


        :return: The value_column_name of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._value_column_name

    @value_column_name.setter
    def value_column_name(self, value_column_name):
        """Sets the value_column_name of this AlertRule.


        :param value_column_name: The value_column_name of this AlertRule.  # noqa: E501
        :type: str
        """

        self._value_column_name = value_column_name

    @property
    def value_name(self):
        """Gets the value_name of this AlertRule.  # noqa: E501


        :return: The value_name of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._value_name

    @value_name.setter
    def value_name(self, value_name):
        """Sets the value_name of this AlertRule.


        :param value_name: The value_name of this AlertRule.  # noqa: E501
        :type: str
        """

        self._value_name = value_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
