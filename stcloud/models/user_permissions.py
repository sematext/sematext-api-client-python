# coding: utf-8

"""
    Sematext Cloud API

    API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_delete': 'bool',
        'can_edit': 'bool',
        'can_view': 'bool'
    }

    attribute_map = {
        'can_delete': 'canDelete',
        'can_edit': 'canEdit',
        'can_view': 'canView'
    }

    def __init__(self, can_delete=None, can_edit=None, can_view=None):  # noqa: E501
        """UserPermissions - a model defined in Swagger"""  # noqa: E501
        self._can_delete = None
        self._can_edit = None
        self._can_view = None
        self.discriminator = None
        if can_delete is not None:
            self.can_delete = can_delete
        if can_edit is not None:
            self.can_edit = can_edit
        if can_view is not None:
            self.can_view = can_view

    @property
    def can_delete(self):
        """Gets the can_delete of this UserPermissions.  # noqa: E501


        :return: The can_delete of this UserPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this UserPermissions.


        :param can_delete: The can_delete of this UserPermissions.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_edit(self):
        """Gets the can_edit of this UserPermissions.  # noqa: E501


        :return: The can_edit of this UserPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this UserPermissions.


        :param can_edit: The can_edit of this UserPermissions.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def can_view(self):
        """Gets the can_view of this UserPermissions.  # noqa: E501


        :return: The can_view of this UserPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_view

    @can_view.setter
    def can_view(self, can_view):
        """Sets the can_view of this UserPermissions.


        :param can_view: The can_view of this UserPermissions.  # noqa: E501
        :type: bool
        """

        self._can_view = can_view

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
